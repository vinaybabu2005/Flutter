Question 9: Create a Provider that provides a list of strings and a function to add new strings to the list. Display the list in another widget.

source code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => StringListProvider(),
      child: StringListApp(),
    ),
  );
}

// ðŸ”¹ Provider class to manage a list of strings
class StringListProvider extends ChangeNotifier {
  List<String> _items = [];

  List<String> get items => _items;

  void addItem(String value) {
    _items.add(value);
    notifyListeners(); // Notify all listening widgets
  }
}

class StringListApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Provider String List Example',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: StringListHomeScreen(),
    );
  }
}

class StringListHomeScreen extends StatefulWidget {
  @override
  _StringListHomeScreenState createState() => _StringListHomeScreenState();
}

class _StringListHomeScreenState extends State<StringListHomeScreen> {
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final stringListProvider = Provider.of<StringListProvider>(context);

    return Scaffold(
      appBar: AppBar(title: Text("Provider String List")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Input field to add new string
            Row(
              children: [
                Expanded(
                  child: TextFormField(
                    controller: _controller,
                    decoration: InputDecoration(
                      labelText: "Enter a string",
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                SizedBox(width: 10),
                ElevatedButton(
                  onPressed: () {
                    if (_controller.text.isNotEmpty) {
                      stringListProvider.addItem(_controller.text);
                      _controller.clear();
                    }
                  },
                  child: Text("Add"),
                )
              ],
            ),
            SizedBox(height: 20),
            // Display the list in another widget
            Expanded(child: StringListDisplay()),
          ],
        ),
      ),
    );
  }
}

// ðŸ”¹ Widget to display the list of strings
class StringListDisplay extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer<StringListProvider>(
      builder: (context, stringListProvider, child) {
        final items = stringListProvider.items;

        if (items.isEmpty) {
          return Center(
            child: Text(
              "No items yet",
              style: TextStyle(fontSize: 18, color: Colors.grey),
            ),
          );
        }

        return ListView.builder(
          itemCount: items.length,
          itemBuilder: (context, index) {
            return ListTile(
              leading: CircleAvatar(child: Text('${index + 1}')),
              title: Text(items[index]),
            );
          },
        );
      },
    );
  }
}
